// <auto-generated />
using System;
using Bcs.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bcs.DataAccess.Migrations
{
    [DbContext(typeof(BcsDbContext))]
    [Migration("20190903152056_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Bcs.DataAccess.User.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<bool>("DisableLogin");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<int>("StaffId");

                    b.Property<int>("StudentId");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "15cb1ad6-7143-40d0-9cdd-f0849ecd4413",
                            DisableLogin = false,
                            Email = "Admin@Compunet.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@COMPUNET.COM",
                            NormalizedUserName = "ADMIN@COMPUNET.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJn9Qq5TjnVFXsrMlMfMoyujM9VwmBQMCeTMPZFy8WaTJtJTQfEAjEvf4BAPiVDIaQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            StaffId = 0,
                            StudentId = 0,
                            TwoFactorEnabled = false,
                            UserName = "Admin@Compunet.com"
                        },
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e675",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5042669a-71d5-4f9a-8dd6-f3f06b239776",
                            DisableLogin = false,
                            Email = "SuperAdmin@Compunet.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@COMPUNET.COM",
                            NormalizedUserName = "SUPERADMIN@COMPUNET.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELz18rSHXTKTAbBIqefr3oIGNTOp6798qmWkO5Lzw+Whz2WhaJnIDwDRbFHHRInvYQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            StaffId = 0,
                            StudentId = 0,
                            TwoFactorEnabled = false,
                            UserName = "SuperAdmin@Compunet.com"
                        });
                });

            modelBuilder.Entity("Bcs.Models.Batch", b =>
                {
                    b.Property<int>("BatchId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BatchDescription");

                    b.Property<string>("BatchName");

                    b.HasKey("BatchId");

                    b.ToTable("Batches");
                });

            modelBuilder.Entity("Bcs.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseCode");

                    b.Property<string>("CourseDescription");

                    b.Property<string>("CourseName");

                    b.Property<int>("ProgrammeId");

                    b.HasKey("CourseId");

                    b.HasIndex("ProgrammeId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Bcs.Models.CourseRegistration", b =>
                {
                    b.Property<int>("CourseRegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatchId");

                    b.Property<int>("CourseId");

                    b.Property<DateTime?>("ExamRegDate");

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsExam");

                    b.Property<bool>("IsTraining");

                    b.Property<int>("SessionId");

                    b.Property<DateTime>("TrainingRegDate");

                    b.HasKey("CourseRegistrationId");

                    b.HasIndex("BatchId");

                    b.HasIndex("CourseId");

                    b.HasIndex("SessionId");

                    b.ToTable("CourseRegistrations");
                });

            modelBuilder.Entity("Bcs.Models.ExamTimeTable", b =>
                {
                    b.Property<int>("ExamTimeTableId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatchId");

                    b.Property<int>("CourseId");

                    b.Property<DateTime>("ExamDate");

                    b.Property<DateTime>("ExamEndTime");

                    b.Property<DateTime>("ExamStartTime");

                    b.Property<int>("SessionId");

                    b.Property<string>("Venue");

                    b.Property<string>("VenueDetails");

                    b.HasKey("ExamTimeTableId");

                    b.HasIndex("BatchId");

                    b.HasIndex("CourseId");

                    b.HasIndex("SessionId");

                    b.ToTable("ExamTimeTables");
                });

            modelBuilder.Entity("Bcs.Models.PaymentCategory", b =>
                {
                    b.Property<int>("PaymentCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName");

                    b.HasKey("PaymentCategoryId");

                    b.ToTable("PaymentCategories");
                });

            modelBuilder.Entity("Bcs.Models.PaymentSetting", b =>
                {
                    b.Property<int>("PaymentSettingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ApplyDiscount");

                    b.Property<int>("BatchId");

                    b.Property<bool>("ConsiderNationality");

                    b.Property<double>("Discount");

                    b.Property<int>("PaymentCategoryId");

                    b.Property<int>("SessionId");

                    b.HasKey("PaymentSettingId");

                    b.HasIndex("BatchId");

                    b.HasIndex("PaymentCategoryId");

                    b.HasIndex("SessionId");

                    b.ToTable("PaymentSettings");
                });

            modelBuilder.Entity("Bcs.Models.PaymentType", b =>
                {
                    b.Property<int>("PaymentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount");

                    b.Property<string>("AmountInWords");

                    b.Property<int>("BatchId");

                    b.Property<bool>("IsForeign");

                    b.Property<int>("PaymentCategoryId");

                    b.Property<int>("SessionId");

                    b.HasKey("PaymentTypeId");

                    b.HasIndex("BatchId");

                    b.HasIndex("PaymentCategoryId");

                    b.HasIndex("SessionId");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("Bcs.Models.Programme", b =>
                {
                    b.Property<int>("ProgrammeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProgrammeCode");

                    b.Property<string>("ProgrammeDescription");

                    b.Property<string>("ProgrammeName");

                    b.HasKey("ProgrammeId");

                    b.ToTable("Programmes");
                });

            modelBuilder.Entity("Bcs.Models.Session", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ActiveSession");

                    b.Property<DateTime>("SessionEnd");

                    b.Property<string>("SessionName");

                    b.Property<DateTime>("SessionStart");

                    b.HasKey("SessionId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Bcs.Models.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<string>("LastName");

                    b.Property<string>("Lga");

                    b.Property<string>("OtherNames");

                    b.Property<byte>("Passport");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("StaffNumber");

                    b.Property<string>("StateOfOrigin");

                    b.HasKey("StaffId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("Bcs.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BcsReferenceNumber");

                    b.Property<string>("Country");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<bool>("IsExamCandidate");

                    b.Property<bool>("IsTrainingCandidate");

                    b.Property<string>("LastName");

                    b.Property<string>("Lga");

                    b.Property<string>("OtherNames");

                    b.Property<byte>("Passport");

                    b.Property<string>("PhoneNumber");

                    b.Property<int>("SessionId");

                    b.Property<string>("StateOfOrigin");

                    b.Property<string>("StudentNumber");

                    b.HasKey("StudentId");

                    b.HasIndex("SessionId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Bcs.Models.StudentPayment", b =>
                {
                    b.Property<int>("StudentPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount");

                    b.Property<int>("BatchId");

                    b.Property<bool>("IsPayed");

                    b.Property<int>("PaymentCategoryId");

                    b.Property<DateTime>("PaymentDate");

                    b.Property<string>("PaymentReferenceNo")
                        .HasMaxLength(30);

                    b.Property<string>("PaymentStatus");

                    b.Property<int>("SessionId");

                    b.Property<int?>("StudentId");

                    b.HasKey("StudentPaymentId");

                    b.HasIndex("BatchId");

                    b.HasIndex("PaymentCategoryId");

                    b.HasIndex("PaymentReferenceNo")
                        .IsUnique()
                        .HasFilter("[PaymentReferenceNo] IS NOT NULL");

                    b.HasIndex("SessionId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentPayments");
                });

            modelBuilder.Entity("Bcs.Models.StudentResult", b =>
                {
                    b.Property<int>("StudentResultId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatchId");

                    b.Property<int>("CourseId");

                    b.Property<string>("Grade");

                    b.Property<string>("Remark");

                    b.Property<int>("SessionId");

                    b.Property<int?>("StudentId");

                    b.HasKey("StudentResultId");

                    b.HasIndex("BatchId");

                    b.HasIndex("CourseId");

                    b.HasIndex("SessionId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentResults");
                });

            modelBuilder.Entity("Bcs.Models.TrainingTimeTable", b =>
                {
                    b.Property<int>("TrainingTimeTableId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatchId");

                    b.Property<int>("CourseId");

                    b.Property<string>("DayOfTheWeek");

                    b.Property<DateTime>("EndTime");

                    b.Property<int>("SessionId");

                    b.Property<DateTime>("StartTime");

                    b.Property<string>("Venue");

                    b.Property<string>("VenueDetails");

                    b.HasKey("TrainingTimeTableId");

                    b.HasIndex("BatchId");

                    b.HasIndex("CourseId");

                    b.HasIndex("SessionId");

                    b.ToTable("TrainingTimeTables");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            ConcurrencyStamp = "18209871-61a2-4b29-ab19-ec4f98151b15",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e675",
                            ConcurrencyStamp = "58fbf796-b635-4fb9-943e-a4497097b7f0",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e675",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e675"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Bcs.Models.Course", b =>
                {
                    b.HasOne("Bcs.Models.Programme", "Programme")
                        .WithMany("Courses")
                        .HasForeignKey("ProgrammeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bcs.Models.CourseRegistration", b =>
                {
                    b.HasOne("Bcs.Models.Batch", "Batch")
                        .WithMany("CourseRegistrations")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bcs.Models.Course", "Course")
                        .WithMany("CourseRegistrations")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bcs.Models.Session", "Session")
                        .WithMany("CourseRegistrations")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bcs.Models.ExamTimeTable", b =>
                {
                    b.HasOne("Bcs.Models.Batch", "Batch")
                        .WithMany("ExamTimeTables")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bcs.Models.Course", "Course")
                        .WithMany("ExamTimeTables")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bcs.Models.Session", "Session")
                        .WithMany("ExamTimeTables")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bcs.Models.PaymentSetting", b =>
                {
                    b.HasOne("Bcs.Models.Batch", "Batch")
                        .WithMany("PaymentSettings")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bcs.Models.PaymentCategory", "PaymentCategory")
                        .WithMany("PaymentSettings")
                        .HasForeignKey("PaymentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bcs.Models.Session", "Session")
                        .WithMany("PaymentSettings")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bcs.Models.PaymentType", b =>
                {
                    b.HasOne("Bcs.Models.Batch", "Batch")
                        .WithMany("PaymentTypes")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bcs.Models.PaymentCategory", "PaymentCategory")
                        .WithMany("PaymentTypes")
                        .HasForeignKey("PaymentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bcs.Models.Session", "Session")
                        .WithMany("PaymentTypes")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bcs.Models.Student", b =>
                {
                    b.HasOne("Bcs.Models.Session", "AdmittedSession")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bcs.Models.StudentPayment", b =>
                {
                    b.HasOne("Bcs.Models.Batch", "Batch")
                        .WithMany("StudentPayments")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bcs.Models.PaymentCategory", "PaymentCategory")
                        .WithMany("StudentPayments")
                        .HasForeignKey("PaymentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bcs.Models.Session", "Session")
                        .WithMany("StudentPayments")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bcs.Models.Student", "Student")
                        .WithMany("StudentPayments")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("Bcs.Models.StudentResult", b =>
                {
                    b.HasOne("Bcs.Models.Batch", "Batch")
                        .WithMany("StudentResult")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bcs.Models.Course", "Course")
                        .WithMany("StudentResult")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bcs.Models.Session", "Session")
                        .WithMany("StudentResult")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bcs.Models.Student", "Student")
                        .WithMany("StudentResult")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("Bcs.Models.TrainingTimeTable", b =>
                {
                    b.HasOne("Bcs.Models.Batch", "Batch")
                        .WithMany()
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bcs.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bcs.Models.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Bcs.DataAccess.User.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Bcs.DataAccess.User.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bcs.DataAccess.User.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Bcs.DataAccess.User.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
